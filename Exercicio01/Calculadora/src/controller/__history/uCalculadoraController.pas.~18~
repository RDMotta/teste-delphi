unit uCalculadoraController;

interface

uses
  Vcl.StdCtrls, System.SysUtils, uDisplay, uCalcStrategy;

Type
  TCalculadoraController = class
  protected
    FDisplay: TDisplay;
    FCalcStrategy: TCalculadoraStrategy;
    FedtEntrada: TEdit;
  public
    constructor Create(var AedtEntrada: TEdit); overload;
    destructor Destroy; overload;
    procedure DefinirOperador(const AOperacao: String);
    procedure DefinirValor(const AValor, AOperacao: String);
    function isValorValido(var Key: Char): boolean;
    procedure GuardarValor;
    procedure AdicionarDigito(const ADigito: String);
    function AplicarResultado(const AOperacao: String): Double;
    function AplicarImpostoA: Double;
    function AplicarImpostoB: Double;
    function AplicarImpostoC: Double;
  end;

implementation

{ TCalculadoraController }

procedure TCalculadoraController.AdicionarDigito(const ADigito: String);
begin
  if (ADigito = ',') and (Pos(',',FedtEntrada.Text) > 0) then
    Exit;
  FedtEntrada.Text := FedtEntrada.Text + ADigito;
end;

function TCalculadoraController.AplicarImpostoA: Double;
begin
  FCalcStrategy.AplicarResultado(FDisplay, 'A');
  result :=  FDisplay.Resultado;
end;

function TCalculadoraController.AplicarImpostoB: Double;
begin
  FCalcStrategy.AplicarResultado(FDisplay, 'B');
  result :=  FDisplay.Resultado;
end;

function TCalculadoraController.AplicarImpostoC: Double;
begin
  FCalcStrategy.AplicarResultado(FDisplay, 'C');
  result :=  FDisplay.Resultado;
end;

function TCalculadoraController.AplicarResultado(const AOperacao: String): Double;
begin
  if FedtEntrada.Text = '' then
     Exit;
  FDisplay.Valor2 := StrToFloat(FedtEntrada.Text);
  FCalcStrategy.AplicarResultado(FDisplay, FDisplay.UltimoOperador);
  Self.GuardarValor;
  FDisplay.Operador := AOperacao;
  if FDisplay.Operador <> '=' then
  begin
    FDisplay.UltimoOperador := AOperacao;
  end;
  result :=  FDisplay.Resultado;
end;

constructor TCalculadoraController.Create(var AedtEntrada: TEdit);
begin
  FedtEntrada := AedtEntrada;
  FDisplay := TDisplay.Create;
  FCalcStrategy := TCalculadoraStrategy.Create;
end;

procedure TCalculadoraController.DefinirOperador(const AOperacao: String);
begin
  if ((AOperacao  = 'A') or (AOperacao = 'B') or (AOperacao ='C')
   and (FedtEntrada.Text <> '')) then
  begin
    DefinirValor(FedtEntrada.Text, AOperacao);
    FedtEntrada.Text := FloatToStr(AplicarResultado(AOperacao));
    FedtEntrada.SetFocus;
    FDisplay.Resultado := 0;
    Exit;
  end;

  if ((FDisplay.UltimoOperador  = 'A') or (FDisplay.UltimoOperador = 'B') or (FDisplay.UltimoOperador ='C') and (AOperacao = '=')) then
  begin
    DefinirValor(FedtEntrada.Text, FDisplay.UltimoOperador);
    FedtEntrada.Text := FloatToStr(AplicarResultado(FDisplay.UltimoOperador));
    FedtEntrada.SetFocus;
    FDisplay.Resultado := 0;
    Exit;
  end;

  if (FDisplay.Operador = '') or ((FDisplay.Operador = '=') And (AOperacao <> FDisplay.Operador)) then
    DefinirValor(FedtEntrada.Text, AOperacao)
  else
  begin
    FedtEntrada.Text := FloatToStr(AplicarResultado(AOperacao));
    FedtEntrada.SetFocus;
    FDisplay.Resultado := 0;
  end;
end;

procedure TCalculadoraController.DefinirValor(const AValor, AOperacao: String);
begin
  if AValor = '' then
    Exit;

  FDisplay.Valor1 := StrToFloat(AValor);
  //FedtEntrada.Clear;
  FedtEntrada.SetFocus;
  FDisplay.Operador := AOperacao;
  FDisplay.UltimoOperador := AOperacao;
end;

destructor TCalculadoraController.Destroy;
begin
  FDisplay.Free;
  FCalcStrategy.Free;
end;

procedure TCalculadoraController.GuardarValor;
begin
  FDisplay.Valor1 := FDisplay.Resultado;
  FDisplay.Valor2 := 0;
end;

function TCalculadoraController.isValorValido(var Key: Char): boolean;
begin
  result := FDisplay.isValorValido(Key) ;
end;

end.
