unit TestuFuncionarioController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Vcl.Forms, System.Generics.Collections, uFuncionario,
  uDependente,
  uFuncionarioController;

type
  // Test methods for class TFuncionarioController

  TestTFuncionarioController = class(TTestCase)
  strict private
    FFuncionarioController: TFuncionarioController;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCalcularImpostoIR;
    procedure TestCalcularImpostoINSS;
  end;

implementation

procedure TestTFuncionarioController.SetUp;
begin
  FFuncionarioController := TFuncionarioController.Create;
end;

procedure TestTFuncionarioController.TearDown;
begin
  FFuncionarioController.Free;
  FFuncionarioController := nil;
end;

procedure TestTFuncionarioController.TestCalcularImpostoIR;
var
  ReturnValue: Real;
  oFuncionario: TFuncionario;
  oDependente1: TDependente;
  oDependente2: TDependente;
begin
  oFuncionario := TFuncionario.Create;
  oDependente1 := TDependente.Create;
  oDependente2 := TDependente.Create;
  try
    oFuncionario.Salario := 1000;
    oDependente1.IsCalculaIR := true;
    oDependente2.IsCalculaIR := true;
    oFuncionario.Dependentes.Add(oDependente1);
    oFuncionario.Dependentes.Add(oDependente2);

    FFuncionarioController.AdicionarFuncionario(oFuncionario);
    ReturnValue := FFuncionarioController.CalcularImpostoIR;

    CheckEquals(120, ReturnValue);
  finally
    oFuncionario.Free;
    oFuncionario := nil;
  end;

end;

procedure TestTFuncionarioController.TestCalcularImpostoINSS;
var
  ReturnValue: Real;
  oFuncionario: TFuncionario;
  oDependente1: TDependente;
  oDependente2: TDependente;
begin
  oFuncionario := TFuncionario.Create;
  oDependente1 := TDependente.Create;
  oDependente2 := TDependente.Create;
  try
    oFuncionario.Salario := 1000;
    oDependente1.IsCalculaINSS := true;
    oDependente2.IsCalculaIR := true;
    oFuncionario.Dependentes.Add(oDependente1);
    oFuncionario.Dependentes.Add(oDependente2);

    FFuncionarioController.AdicionarFuncionario(oFuncionario);
    ReturnValue := FFuncionarioController.CalcularImpostoINSS;

    CheckEquals(80, ReturnValue);

  finally
    oFuncionario.Free;
    oFuncionario := nil;
  end;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTFuncionarioController.Suite);

end.
